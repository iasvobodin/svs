#ifdef GL_ES
precision mediump float;
#endif
// get our varyings
varying vec3 vVertexPosition;
varying vec2 vTextureCoord;
// varying vec2 vTextureCoord0;
// varying vec2 vTextureCoord1;
varying vec2 vActiveTextureCoord;
varying vec2 vNextTextureCoord;
varying float vProgress;
// the uniform we declared inside our javascript
// uniform float uTime;
uniform float uProgress; 
uniform vec2 uFragmentCorrection;
uniform float uProgress2;
// our texture sampler (default name, to use a different name please refer to the documentation)
// uniform sampler2D uSampler0;
// uniform sampler2D uSampler1;
uniform sampler2D activeTex;
uniform sampler2D nextTex;


vec3 permute(vec3 x) {
    return mod(((x*34.0)+1.0)*x, 289.0);
}

  float snoise(vec2 v){
    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    vec2 i1;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod(i, 289.0);
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
    + i.x + vec3(0.0, i1.x, 1.0 ));
    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
    m = m*m ;
    m = m*m ;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
  }

  void main() {
    float p = fract(uProgress);
    vec4 noise = vec4(vec3(snoise(vTextureCoord * sqrt(2.0))), 1.0);

    float distanceFromCenter = distance(vTextureCoord, vec2(0., 0.5)) * 0.7;

    vec2 scale = vec2(1. + (uFragmentCorrection - 1.) * p);

    vec2 newUV = (vActiveTextureCoord - vec2(.5) * uProgress2) * scale + vec2(.5) * uProgress2;
    vec2 newUV1 = (vNextTextureCoord - vec2(.5) * uProgress2) * scale + vec2(.5) * uProgress2;
    // calculate an effect that goes from 0 to 1 depenging on uOpacity and distanceToLeft
    float spreadFromCenter = clamp((p * (1.0 - distanceFromCenter) - 1.0) + p * 2.0, 0.0, 1.0);

    vec4 firstImage = texture2D(activeTex, vActiveTextureCoord + noise.r * spreadFromCenter * 0.175);
    vec4 secondImage = texture2D(nextTex, vNextTextureCoord - noise.r * (1.0 - spreadFromCenter) * 0.175);

    // mix both texture
    vec4 finalImage = mix(firstImage, secondImage, spreadFromCenter);

    // handling premultiplied alpha
    finalImage = vec4(finalImage.rgb * finalImage.a, finalImage.a);

    gl_FragColor = finalImage;
  }




// void main() {
// float p = fract(uProgress);

//   vec4 image1 = texture2D(activeTex, vActiveTextureCoord - fract(vActiveTextureCoord * vec2(8.,0.)) * p * 0.1);
//   vec4 image2 = texture2D(nextTex, vNextTextureCoord - fract(vNextTextureCoord * vec2(8.,0.)) * (1. - p) * 0.1);
//   gl_FragColor = mix(image1, image2, p);

// }